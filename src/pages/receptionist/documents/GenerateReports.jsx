import React, { useState, useEffect } from 'react';
import {
  Card,
  Table,
  Button,
  Space,
  Select,
  DatePicker,
  Form,
  Input,
  Modal,
  message,
  Typography,
  Row,
  Col,
  Tooltip,
  Tag
} from 'antd';
import {
  FileTextOutlined,
  PrinterOutlined,
  DownloadOutlined,
  EyeOutlined,
  SettingOutlined,
  FilterOutlined
} from '@ant-design/icons';
import moment from 'moment';
import reportsAPI from '../../../services/reportsAPI';
import './GenerateReports.css';

const { Title, Text } = Typography;
const { RangePicker } = DatePicker;
const { Option } = Select;

const GenerateReports = () => {
  const [loading, setLoading] = useState(false);
  const [reports, setReports] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [previewVisible, setPreviewVisible] = useState(false);
  const [selectedReport, setSelectedReport] = useState(null);
  const [form] = Form.useForm();

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = async () => {
    try {
      setLoading(true);
      const response = await reportsAPI.getReports();
      setReports(response.data);
    } catch (error) {
      message.error('Failed to fetch reports');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateReport = async (values) => {
    try {
      setLoading(true);
      const response = await reportsAPI.generateReport(values);
      message.success('Report generated successfully');
      fetchReports();
      setModalVisible(false);
    } catch (error) {
      message.error('Failed to generate report');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async (report) => {
    try {
      await reportsAPI.downloadReport(report._id);
      message.success('Report downloaded successfully');
    } catch (error) {
      message.error('Failed to download report');
    }
  };

  const handlePrint = async (report) => {
    try {
      const response = await reportsAPI.getReportPreview(report._id);
      const printWindow = window.open('', '_blank');
      printWindow.document.write(response.data);
      printWindow.document.close();
      printWindow.print();
    } catch (error) {
      message.error('Failed to print report');
    }
  };

  const columns = [
    {
      title: 'Report Name',
      dataIndex: 'name',
      key: 'name',
      render: (text, record) => (
        <Space>
          <FileTextOutlined />
          <Text>{text}</Text>
        </Space>
      )
    },
    {
      title: 'Type',
      dataIndex: 'type',
      key: 'type',
      render: (type) => <Tag color="blue">{type}</Tag>
    },
    {
      title: 'Generated On',
      dataIndex: 'createdAt',
      key: 'createdAt',
      render: (date) => moment(date).format('DD/MM/YYYY HH:mm')
    },
    {
      title: 'Generated By',
      dataIndex: 'generatedBy',
      key: 'generatedBy',
      render: (user) => user.name
    },
    {
      title: 'Status',
      dataIndex: 'status',
      key: 'status',
      render: (status) => (
        <Tag color={status === 'completed' ? 'green' : 'orange'}>
          {status.toUpperCase()}
        </Tag>
      )
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Tooltip title="Preview">
            <Button
              type="text"
              icon={<EyeOutlined />}
              onClick={() => {
                setSelectedReport(record);
                setPreviewVisible(true);
              }}
            />
          </Tooltip>
          <Tooltip title="Download">
            <Button
              type="text"
              icon={<DownloadOutlined />}
              onClick={() => handleDownload(record)}
            />
          </Tooltip>
          <Tooltip title="Print">
            <Button
              type="text"
              icon={<PrinterOutlined />}
              onClick={() => handlePrint(record)}
            />
          </Tooltip>
        </Space>
      )
    }
  ];

  return (
    <div className="generate-reports">
      <Card
        title={
          <Space>
            <FileTextOutlined />
            <span>Generate Reports</span>
          </Space>
        }
        extra={
          <Button
            type="primary"
            icon={<FileTextOutlined />}
            onClick={() => setModalVisible(true)}
          >
            Generate New Report
          </Button>
        }
      >
        <Row gutter={[16, 16]} className="filters">
          <Col xs={24} sm={12} md={6}>
            <Select
              placeholder="Report Type"
              style={{ width: '100%' }}
              allowClear
            >
              <Option value="patient">Patient Report</Option>
              <Option value="appointment">Appointment Report</Option>
              <Option value="financial">Financial Report</Option>
              <Option value="inventory">Inventory Report</Option>
            </Select>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <RangePicker style={{ width: '100%' }} />
          </Col>
          <Col xs={24} sm={12} md={4}>
            <Button icon={<FilterOutlined />} block>
              Filter
            </Button>
          </Col>
        </Row>

        <Table
          loading={loading}
          columns={columns}
          dataSource={reports}
          rowKey="_id"
          pagination={{
            pageSize: 10,
            showTotal: (total) => `Total ${total} reports`
          }}
        />

        <Modal
          title="Generate New Report"
          visible={modalVisible}
          onCancel={() => setModalVisible(false)}
          footer={null}
          width={700}
        >
          <Form
            form={form}
            layout="vertical"
            onFinish={handleGenerateReport}
          >
            <Form.Item
              name="type"
              label="Report Type"
              rules={[{ required: true }]}
            >
              <Select>
                <Option value="patient">Patient Report</Option>
                <Option value="appointment">Appointment Report</Option>
                <Option value="financial">Financial Report</Option>
                <Option value="inventory">Inventory Report</Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="dateRange"
              label="Date Range"
              rules={[{ required: true }]}
            >
              <RangePicker style={{ width: '100%' }} />
            </Form.Item>

            <Form.Item
              name="format"
              label="Format"
              rules={[{ required: true }]}
            >
              <Select>
                <Option value="pdf">PDF</Option>
                <Option value="excel">Excel</Option>
                <Option value="csv">CSV</Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="includeCharts"
              label="Include Charts"
              valuePropName="checked"
            >
              <Select mode="multiple">
                <Option value="bar">Bar Charts</Option>
                <Option value="line">Line Charts</Option>
                <Option value="pie">Pie Charts</Option>
              </Select>
            </Form.Item>

            <Form.Item>
              <Space className="form-buttons">
                <Button onClick={() => setModalVisible(false)}>
                  Cancel
                </Button>
                <Button type="primary" htmlType="submit" loading={loading}>
                  Generate
                </Button>
              </Space>
            </Form.Item>
          </Form>
        </Modal>

        <Modal
          title="Report Preview"
          visible={previewVisible}
          onCancel={() => setPreviewVisible(false)}
          footer={[
            <Button key="print" icon={<PrinterOutlined />} onClick={() => handlePrint(selectedReport)}>
              Print
            </Button>,
            <Button
              key="download"
              type="primary"
              icon={<DownloadOutlined />}
              onClick={() => handleDownload(selectedReport)}
            >
              Download
            </Button>
          ]}
          width={800}
        >
          {selectedReport && (
            <div className="report-preview">
              {/* Report preview content */}
            </div>
          )}
        </Modal>
      </Card>
    </div>
  );
};

export default GenerateReports; 